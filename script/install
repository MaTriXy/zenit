#!/usr/bin/env node

var fs = require('fs');
var verifyRequirements = require('./utils/verify-requirements');
var safeExec = require('./utils/child-process-wrapper.js').safeExec;
var path = require('path');

// Executes an array of commands in series
function executeCommands(commands, done, index) {
  index = (index == undefined ? 0 : index);
  if (index < commands.length) {
    var command = commands[index];
    if (command.message)
      console.log(command.message);
    var options = null;
    if (typeof command !== 'string') {
      options = command.options;
      command = command.command;
    }
    safeExec(command, options, executeCommands.bind(this, commands, done, index + 1));
  }
  else
    done(null);
}

function printArgs(args) {
  out = "";
  for(key in args) {
    out += "--"+key+"="+args[key]+" ";
  }
  return out;
}

function bootstrap() {
  var apmInstallPath = path.resolve(__dirname, '..', 'zpm');
  if (!fs.existsSync(apmInstallPath))
    fs.mkdirSync(apmInstallPath);
  if (!fs.existsSync(path.join(apmInstallPath, 'node_modules')))
    fs.mkdirSync(path.join(apmInstallPath, 'node_modules'));

  var apmPath = '"' + path.resolve(__dirname, '..', 'zpm', 'node_modules', 'zenit-package-manager', 'bin', 'zpm') + '"';
  var apmFlags = process.env.JANKY_SHA1 || process.argv.indexOf('--no-color') !== -1 ? ' --no-color' : '';

  var npmFlags = ' --userconfig=' + '"' + path.resolve('.npmrc') + '" ';

  var gruntPath = '"' + path.resolve(__dirname, '..', 'build', 'node_modules', '.bin', 'grunt') + '"';

  var packagesToDedupe = ['fs-plus', 'season', 'semver'];

  // use the system version of npm to install build folder dependencies, including our
  // own copy of NPM 3.x, which we'll use for subsequent commands
  var buildInstallCommand = 'npm' + npmFlags + 'install';
  var buildInstallOptions = {cwd: path.resolve(__dirname, '..', 'build')};
  var npmPath = '"' + path.resolve(__dirname, '..', 'build', 'node_modules', '.bin', 'npm') + '"';

  // Use our local version of npm in ./build to install apm. This ensures it gets a
  // flat dependency tree.
  var apmInstallCommand = npmPath + npmFlags + '--target=0.10.40 ' + 'install';
  var apmInstallOptions = {cwd: apmInstallPath};

  var apmDedupeCommand = npmPath + npmFlags + '--target=0.10.40 ' + 'dedupe';
  var apmDedupeOptions = {cwd: path.join(apmInstallPath, 'node_modules', 'npm')};

  var moduleInstallCommand = apmPath + ' install' + apmFlags;
  var dedupeApmCommand = apmPath + ' dedupe' + apmFlags;
  var semverOptions = {cwd: path.resolve(__dirname, '..', 'zpm', 'node_modules', 'zenit-package-manager')};

  if (process.argv.indexOf('--no-quiet') === -1) {
    buildInstallCommand  += ' --loglevel error';
    apmInstallCommand    += ' --loglevel error';
    moduleInstallCommand += ' --loglevel error';
    dedupeApmCommand     += ' --quiet';

    apmDedupeOptions.ignoreStderr = true;
    apmDedupeOptions.ignoreStdout = true;
    buildInstallOptions.ignoreStdout = true;
    apmInstallOptions.ignoreStdout = true;
  }

  // apm ships with 32-bit node so make sure its native modules are compiled
  // for a 32-bit target architecture
  if (process.env.JANKY_SHA1 && process.platform === 'win32')
    apmInstallCommand += ' --arch=ia32';

  m1  = "\n---> Installing Zenit build tools\n"
  m1 += "     This goes inside the `build` folder and runs `npm install`\n"
  m1 += "     It will use the system `npm` to bootstrap our own Zenit npm.\n"
  m1 += "     Our build tools (like Grunt) need to be compiled against Node via `npm`.\n"
  m1 += "     Everything else needs to be compiled against Chromium with `apm`.\n\n"
  m1 += "     $ "+buildInstallCommand+" "+printArgs(buildInstallOptions)+"\n"

  m2  = "\n\n---> Installing zpm\n"
  m2 += "     This installs zpm via Zenit's `npm`\n"
  m2 += "     We use this local apm copy to install all Zenit dependencies & packages\n\n"
  m2 += "     $ "+apmInstallCommand+" "+printArgs(apmInstallOptions)+"\n"

  m2a  = "\n\n---> Flattening zpm package tree\n"
  m2a += "     This runs `npm dedupe` on apm's `npm` dependency.\n"
  m2a += "     We use this to prevent paths over 260 characters on Windows.\n\n"
  m2a += "     $ "+apmDedupeCommand+" "+printArgs(apmDedupeOptions)+"\n"

  m3  = "\n\n---> Cleaning apm via `zpm clean`\n"

  m4  = "\n\n---> Installing Zenit dependencies & packages via `apm install`\n\n"
  m4 += "     $ "+moduleInstallCommand+"\n"

  m5  = "\n\n---> De-duping packages `zpm clean`\n\n"
  m5 += "     $ apm "+packagesToDedupe.join(' ')+"\n"

  m6  = "\n\n---> Request version `zpm clean`\n\n"
  m6 += "     $ apm request semver "+printArgs(semverOptions)+"\n"

  m7  = "\n\n---> Getting latest Electron\n\n"
  var gruntCmd = ""
  var downloadElectronCmd = gruntPath + " download-electron --gruntfile build/Gruntfile.coffee"
  m7 += "     $ "+downloadElectronCmd

  var commands = [
    {
      command: buildInstallCommand,
      message: m1,
      options: buildInstallOptions
    },
    {
      command: apmInstallCommand,
      message: m2,
      options: apmInstallOptions
    },
    {
      command: apmDedupeCommand,
      message: m2a,
      options: apmDedupeOptions
    },
    {
      command: apmPath + ' clean' + apmFlags,
      message: m3
    }
  ];

  commands = commands.concat([
    {
      command: moduleInstallCommand,
      message: m4
    },
    {
      command: dedupeApmCommand + ' ' + packagesToDedupe.join(' '),
      message: m5
    },
    {
      command: dedupeApmCommand + ' request semver',
      message: m6,
      options: semverOptions
    },
    {
      command: downloadElectronCmd,
      message: m7
    }
  ]);

  process.chdir(path.dirname(__dirname));
  executeCommands(commands, function() {
    console.log("---------------------------------------------");
    console.log("script/bootstrap completed successfully. You can start\nZenit via ./zenit.sh --dev, or npm start");
    process.exit();
  });
}

verifyRequirements(function(error, successMessage) {
  if (error) {
    console.log(error);
    process.exit(1);
  }

  console.log(successMessage);
  bootstrap();
});